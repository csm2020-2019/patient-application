<?php
namespace csm2020\PatientApp\Controllers;

use csm2020\PatientApp\Database\Database;
use csm2020\PatientApp\Models\Patient;
use csm2020\PatientApp\Models\User;

/**
 * Class UserController
 * @package csm2020\PatientApp\Controllers
 * @author Oliver Earl <ole4@aber.ac.uk>
 */
class UserController
{

    /**
     * UserController constructor.
     */
    public function __construct() {}

    /** Register Method
     * @param $username
     * @param $email
     * @param $password
     * @param $firstName
     * @param $lastName
     * @param $pid
     * @return bool|null
     *
     * The function takes a range of arguments necessary for creating a new user on the database. When patients are
     * added to the database by the Java program, they are emailed a link to the registration page of the frontend
     * that contains their patient ID as a GET variable, i.e. http://users.aber.ac.uk/ole4/register.html?id=1
     *
     * Once it's confirmed that the patient exists in the system and that the patient has not already been assigned
     * a user counterpart, the rest of the inputs are validated. Once done, the user is registered and entered into
     * the database, followed immediately by an amendment to the user ID foreign key in the patients table, tying the
     * room together. If all of this succeeds, true is returned and interpreted as success by the frontend. Null if
     * anything goes wrong, including sanitisation, validation, data already existing in the database, or a database
     * exception.
     *
     * TODO: Rather than just returning null for a wide range of issues, return proper error strings for debugging.
     */
    public function register($username, $email, $password, $firstName, $lastName, $pid)
    {
        // Check if validate patient first
        $patient = Patient::getPatientByPatientId($pid);
        if (!$patient) {
            return null;
        }
        if ($patient->getUserId() === null || $patient->getUserId() === 1) {
         return null;
        }
        Database::sanitise($username);
        Database::sanitise($email);
        Database::sanitise($password);
        Database::sanitise($firstName);
        Database::sanitise($lastName);
        $array = [
            'username' =>   $username,
            'email' =>      $email,
            'password' =>   $password,
            'firstName' =>  $firstName,
            'lastName' =>   $lastName
        ];
        if (!$this->validateUserDetails($array) || !filter_var($email, FILTER_SANITIZE_EMAIL)) {
            return null;
        }

        $user = User::register($array);
        if (!$user) {
            return null;
        }
        // Update patient accordingly
        $patient->setUserId($user);
        $patient->update();
        return true;
    }

    /**
     * Validate User Details Method
     * @param $details
     * @return bool|null
     *
     * This method loops through the array of user details and ensures they are neither null or more than 45 characters
     * in length. Any infractions will return null and cause the entire process to fail.
     */
    public function validateUserDetails($details)
    {
        foreach ($details as $detail) {
            if (!$detail || strlen($detail) > 45) {
                return null;
            }
        }
        return true;
    }

    /**
     * Get RD Details by ID
     * @param $rdid
     * @return array|null
     *
     * When returning Trials information, information about the RD who assigned the exercise regime is also returned. It
     * would be bad to return all of the RD information (which is just a user object with a userType of RD) as it
     * includes the password. Instead, the first and last names of the doctor and their email address are returned so
     * that the user can email them, or at least have their full name available to them. Should anything go wrong
     * at the database level, or the provided user not actually be a RD (just in case) then null is returned.
     */
    public function getRDDetailsById($rdid)
    {
        $user = User::getUserById($rdid);
        if (!$user) {
            return null;
        }
        if ($user->getUserType() === 'rd') {
            return [
                'gp_first_name' =>  $user->getUserFirstName(),
                'gp_last_name' =>   $user->getUserLastName(),
                'gp_email' =>       $user->getUserEmail()
            ];
        }
        return null;
    }
}

